'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="vfms_db")>  _
Partial Public Class vfmsDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertuser(instance As user)
    End Sub
  Partial Private Sub Updateuser(instance As user)
    End Sub
  Partial Private Sub Deleteuser(instance As user)
    End Sub
  Partial Private Sub Insertusergroup(instance As usergroup)
    End Sub
  Partial Private Sub Updateusergroup(instance As usergroup)
    End Sub
  Partial Private Sub Deleteusergroup(instance As usergroup)
    End Sub
  Partial Private Sub Insertusergroup_role(instance As usergroup_role)
    End Sub
  Partial Private Sub Updateusergroup_role(instance As usergroup_role)
    End Sub
  Partial Private Sub Deleteusergroup_role(instance As usergroup_role)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("vfms_dbConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property users() As System.Data.Linq.Table(Of user)
		Get
			Return Me.GetTable(Of user)
		End Get
	End Property
	
	Public ReadOnly Property usergroups() As System.Data.Linq.Table(Of usergroup)
		Get
			Return Me.GetTable(Of usergroup)
		End Get
	End Property
	
	Public ReadOnly Property usergroup_roles() As System.Data.Linq.Table(Of usergroup_role)
		Get
			Return Me.GetTable(Of usergroup_role)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[user]")>  _
Partial Public Class user
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_id As Integer
	
	Private _user_group_id As System.Nullable(Of Integer)
	
	Private _full_name As String
	
	Private _user_name As String
	
	Private _password As String
	
	Private _active As Boolean
	
	Private _usergroup As EntityRef(Of usergroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onuser_idChanged()
    End Sub
    Partial Private Sub Onuser_group_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onuser_group_idChanged()
    End Sub
    Partial Private Sub Onfull_nameChanging(value As String)
    End Sub
    Partial Private Sub Onfull_nameChanged()
    End Sub
    Partial Private Sub Onuser_nameChanging(value As String)
    End Sub
    Partial Private Sub Onuser_nameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._usergroup = CType(Nothing, EntityRef(Of usergroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property user_id() As Integer
		Get
			Return Me._user_id
		End Get
		Set
			If ((Me._user_id = value)  _
						= false) Then
				Me.Onuser_idChanging(value)
				Me.SendPropertyChanging
				Me._user_id = value
				Me.SendPropertyChanged("user_id")
				Me.Onuser_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_group_id", DbType:="Int")>  _
	Public Property user_group_id() As System.Nullable(Of Integer)
		Get
			Return Me._user_group_id
		End Get
		Set
			If (Me._user_group_id.Equals(value) = false) Then
				If Me._usergroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onuser_group_idChanging(value)
				Me.SendPropertyChanging
				Me._user_group_id = value
				Me.SendPropertyChanged("user_group_id")
				Me.Onuser_group_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_full_name", DbType:="VarChar(200)")>  _
	Public Property full_name() As String
		Get
			Return Me._full_name
		End Get
		Set
			If (String.Equals(Me._full_name, value) = false) Then
				Me.Onfull_nameChanging(value)
				Me.SendPropertyChanging
				Me._full_name = value
				Me.SendPropertyChanged("full_name")
				Me.Onfull_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_name", DbType:="VarChar(50)")>  _
	Public Property user_name() As String
		Get
			Return Me._user_name
		End Get
		Set
			If (String.Equals(Me._user_name, value) = false) Then
				Me.Onuser_nameChanging(value)
				Me.SendPropertyChanging
				Me._user_name = value
				Me.SendPropertyChanged("user_name")
				Me.Onuser_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(50)")>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit NOT NULL")>  _
	Public Property active() As Boolean
		Get
			Return Me._active
		End Get
		Set
			If ((Me._active = value)  _
						= false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="usergroup_user", Storage:="_usergroup", ThisKey:="user_group_id", OtherKey:="user_group_id", IsForeignKey:=true)>  _
	Public Property usergroup() As usergroup
		Get
			Return Me._usergroup.Entity
		End Get
		Set
			Dim previousValue As usergroup = Me._usergroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._usergroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._usergroup.Entity = Nothing
					previousValue.users.Remove(Me)
				End If
				Me._usergroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.users.Add(Me)
					Me._user_group_id = value.user_group_id
				Else
					Me._user_group_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("usergroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.usergroup")>  _
Partial Public Class usergroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_group_id As Integer
	
	Private _user_group_name As String
	
	Private _display_order As System.Nullable(Of Integer)
	
	Private _active As Boolean
	
	Private _users As EntitySet(Of user)
	
	Private _usergroup_role As EntityRef(Of usergroup_role)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_group_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onuser_group_idChanged()
    End Sub
    Partial Private Sub Onuser_group_nameChanging(value As String)
    End Sub
    Partial Private Sub Onuser_group_nameChanged()
    End Sub
    Partial Private Sub Ondisplay_orderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ondisplay_orderChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._users = New EntitySet(Of user)(AddressOf Me.attach_users, AddressOf Me.detach_users)
		Me._usergroup_role = CType(Nothing, EntityRef(Of usergroup_role))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_group_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property user_group_id() As Integer
		Get
			Return Me._user_group_id
		End Get
		Set
			If ((Me._user_group_id = value)  _
						= false) Then
				Me.Onuser_group_idChanging(value)
				Me.SendPropertyChanging
				Me._user_group_id = value
				Me.SendPropertyChanged("user_group_id")
				Me.Onuser_group_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_group_name", DbType:="VarChar(200)")>  _
	Public Property user_group_name() As String
		Get
			Return Me._user_group_name
		End Get
		Set
			If (String.Equals(Me._user_group_name, value) = false) Then
				Me.Onuser_group_nameChanging(value)
				Me.SendPropertyChanging
				Me._user_group_name = value
				Me.SendPropertyChanged("user_group_name")
				Me.Onuser_group_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_display_order", DbType:="Int")>  _
	Public Property display_order() As System.Nullable(Of Integer)
		Get
			Return Me._display_order
		End Get
		Set
			If (Me._display_order.Equals(value) = false) Then
				Me.Ondisplay_orderChanging(value)
				Me.SendPropertyChanging
				Me._display_order = value
				Me.SendPropertyChanged("display_order")
				Me.Ondisplay_orderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit NOT NULL")>  _
	Public Property active() As Boolean
		Get
			Return Me._active
		End Get
		Set
			If ((Me._active = value)  _
						= false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="usergroup_user", Storage:="_users", ThisKey:="user_group_id", OtherKey:="user_group_id")>  _
	Public Property users() As EntitySet(Of user)
		Get
			Return Me._users
		End Get
		Set
			Me._users.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="usergroup_usergroup_role", Storage:="_usergroup_role", ThisKey:="user_group_id", OtherKey:="user_group_id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property usergroup_role() As usergroup_role
		Get
			Return Me._usergroup_role.Entity
		End Get
		Set
			Dim previousValue As usergroup_role = Me._usergroup_role.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._usergroup_role.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._usergroup_role.Entity = Nothing
					previousValue.usergroup = Nothing
				End If
				Me._usergroup_role.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.usergroup = Me
				End If
				Me.SendPropertyChanged("usergroup_role")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_users(ByVal entity As user)
		Me.SendPropertyChanging
		entity.usergroup = Me
	End Sub
	
	Private Sub detach_users(ByVal entity As user)
		Me.SendPropertyChanging
		entity.usergroup = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.usergroup_role")>  _
Partial Public Class usergroup_role
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_group_id As Integer
	
	Private _role_name As String
	
	Private _usergroup As EntityRef(Of usergroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_group_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onuser_group_idChanged()
    End Sub
    Partial Private Sub Onrole_nameChanging(value As String)
    End Sub
    Partial Private Sub Onrole_nameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._usergroup = CType(Nothing, EntityRef(Of usergroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_group_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property user_group_id() As Integer
		Get
			Return Me._user_group_id
		End Get
		Set
			If ((Me._user_group_id = value)  _
						= false) Then
				If Me._usergroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onuser_group_idChanging(value)
				Me.SendPropertyChanging
				Me._user_group_id = value
				Me.SendPropertyChanged("user_group_id")
				Me.Onuser_group_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_role_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property role_name() As String
		Get
			Return Me._role_name
		End Get
		Set
			If (String.Equals(Me._role_name, value) = false) Then
				Me.Onrole_nameChanging(value)
				Me.SendPropertyChanging
				Me._role_name = value
				Me.SendPropertyChanged("role_name")
				Me.Onrole_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="usergroup_usergroup_role", Storage:="_usergroup", ThisKey:="user_group_id", OtherKey:="user_group_id", IsForeignKey:=true)>  _
	Public Property usergroup() As usergroup
		Get
			Return Me._usergroup.Entity
		End Get
		Set
			Dim previousValue As usergroup = Me._usergroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._usergroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._usergroup.Entity = Nothing
					previousValue.usergroup_role = Nothing
				End If
				Me._usergroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.usergroup_role = Me
					Me._user_group_id = value.user_group_id
				Else
					Me._user_group_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("usergroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
